'use strict';

/*
  {
    "term": (string) actual term being defined,
    "phonetic": (string) phonetic,
    "pronunciation": (string) audio file url,
    "items": [{
      "pos": (string) part of speech,
      "definitions": [(string) definition]
    }],
    "source": {
      "name": (string) name of source,
      "href": (string) url
    }
  }
*/
function defineGoogle(text) {
  const url = "https://www.google.com/search?q=define " + text +
    "&gws_rd=cr&gl=us";
  return fetch(url).then(function (response) {
    if (!response.ok)
      throw new Error("Network error: HTTP " + response.status + " " +
        response.statusText);
    return response.text().then(function (text) {
      const result = {'source': {'name': 'google', 'href': response.url}};

      const parser = new DOMParser();
      const doc = parser.parseFromString(text, 'text/html');
      const entry = doc.querySelector('div.lr_dct_ent');
      if (entry === null)
        throw new Error("No definition found.");
      result.term = entry.querySelector('span[data-dobid="hdw"]').textContent;

      let elem = entry.querySelector('span.lr_dct_ph');
      if (elem !== null) {
        let phonetic = elem.textContent;
        // Google returns the trailing slash as text but the leading slash is
        // generated by css
        if (!phonetic.startsWith("/"))
          phonetic = "/" + phonetic;
        if (!phonetic.endsWith("/"))
          phonetic += "/";
        result.phonetic = phonetic;
      }
      elem = entry.querySelector('audio[data-dobid="aud"]');
      if (elem !== null) {
        const audioURL = new URL(elem.src, url);
        audioURL.protocol = 'https:';
        result.pronunciation = audioURL.toString();
      }

      const items = [];
      entry.querySelectorAll('ol.lr_dct_sf_sens').forEach(function (elem) {
        const item = {};
        const posElem = elem.parentNode.querySelector('.lr_dct_sf_h');
        if (posElem !== null)
          item.pos = posElem.textContent;

        item.definitions = [];
        elem.querySelectorAll('div[data-dobid="dfn"]').forEach(dfnElem =>
          item.definitions.push(dfnElem.textContent)
        );
        items.push(item);
      });
      result.items = items;

      return result;
    });
  });
}


browser.runtime.onMessage.addListener(function (req, sender, sendResponse) {
  const text = req.text;
  return defineGoogle(text);
});
